import streamlit as st
from PIL import Image, ImageOps, ImageDraw
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import pandas as pd
import seaborn as sns
import folium
from streamlit_folium import folium_static
from geopy.geocoders import Nominatim
import plotly.express as px


# Chargement de l'image de profil
profile_image = Image.open("Alonpdp.jpg")

# Cr√©er un masque circulaire pour l'image avec une meilleure qualit√©
mask_size = (min(profile_image.size),) * 2  # Utiliser une taille carr√©e bas√©e sur la dimension minimale
mask = Image.new('L', mask_size, 0)
draw = ImageDraw.Draw(mask)
draw.ellipse((0, 0) + mask_size, fill=255)

# Redimensionner l'image de profil pour correspondre au masque
profile_image = ImageOps.fit(profile_image, mask_size, centering=(0.5, 0.5))
profile_image.putalpha(mask)

# Configuration de la page Streamlit
st.set_page_config(page_title="Alon Debasc - Ing√©nieur Data", page_icon="üöÄ", layout="wide")

# Style global
st.markdown(
    """
    <style>
    body {color: #CCCCCC; background-color: #1e1e1e;}
    .sidebar .sidebar-content {background-color: #333333;}
    h1, h2, h3, h4 {color: #FFD700;}
    .stMetricLabel {font-size: 1.5em;}
    </style>
    """,
    unsafe_allow_html=True
)

# Barre lat√©rale de navigation avec profil personnel
st.sidebar.image(profile_image, width=150)
st.sidebar.title("Alon Debasc üë®‚Äçüíª")
st.sidebar.write("Ing√©nieur Data & Intelligence Artificielle")
st.sidebar.markdown("---")

st.sidebar.write(
    """
    - üìû *T√©l√©phone*: +33 (0)6 79 04 39 61
    - üìß *Email*: [alon.debasc@efrei.net](mailto:alon.debasc@efrei.net)
    - üîó [LinkedIn](https://www.linkedin.com/in/alon-debasc-17737b223/?originalSubdomain=fr)
    - üîó [GitHub](https://github.com/alon-debasc)
    """
)

# Navigation avec onglets
choice = st.sidebar.radio("Navigation", ["Portfolio", "CV", "Analyse Dataset"])
st.sidebar.markdown("---")

# Palette de couleurs personnalis√©e
primary_color = "#FFD700"  # Jaune dor√©
secondary_color = "#81D8D0"  # Bleu clair

# Fonction pour styliser les titres
def style_title(title):
    st.markdown(f"<h2 style='color: {primary_color};'>{title}</h2>", unsafe_allow_html=True)

def style_subtitle(subtitle):
    st.markdown(f"<h3 style='color: {secondary_color};'>{subtitle}</h3>", unsafe_allow_html=True)

def style_project(title, technologies, description, learnings, skills):
    st.markdown(f"<h4 style='color: {secondary_color};'>{title}</h4>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>Technologies :</strong> {technologies}</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>Description :</strong> {description}</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>Ce que j'ai appris :</strong> {learnings}</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>Comp√©tences d√©bloqu√©es :</strong> {skills}</p>", unsafe_allow_html=True)
    st.markdown("<hr style='border:1px solid #444;'>", unsafe_allow_html=True)

# Page Portfolio
if choice == "Portfolio":
    st.image(profile_image, width=150, use_column_width='auto')
    style_title("Alon Debasc")
    style_subtitle("Ing√©nieur Data & Intelligence Artificielle")

    # Pr√©sentation du portfolio avec des styles plus attrayants
    style_title("Bienvenue dans mon Portfolio")
    st.write("Ce portfolio regroupe les projets et r√©alisations qui refl√®tent mon expertise en ing√©nierie des donn√©es et en intelligence artificielle.")
    st.write("Je cherche √† d√©montrer mes comp√©tences √† travers des projets significatifs qui mettent en avant ma capacit√© √† r√©soudre des probl√®mes concrets, ma cr√©ativit√© et mon expertise technique.")
    st.markdown("<hr style='border:2px solid #333;'>", unsafe_allow_html=True)

    # Exemple de r√©alisations avec des sections plus dynamiques
    style_title("Mes R√©alisations")

    style_project(
        "SWAPAWS - Marketplace d'achat revente",
        "React, MySQL, Python",
        "D√©veloppement d'une plateforme permettant aux utilisateurs d'acheter, vendre ou √©changer des produits, avec un syst√®me de matching automatis√©.",
        "Gestion d'une √©quipe technique, am√©lioration des comp√©tences en d√©veloppement web, et compr√©hension approfondie des syst√®mes de matching.",
        "Leadership, gestion de projet, d√©veloppement front-end et back-end, compr√©hension des besoins utilisateurs."
    )

    style_project(
        "SOWESKIP - Application de file d'attente virtuelle",
        "React, MySQL, Python, QR Code API",
        "Conception d'un syst√®me permettant aux utilisateurs de rejoindre une file d'attente en scannant un QR code, √©vitant ainsi l'attente physique.",
        "Exp√©rience utilisateur, optimisation des processus, et cr√©ation d'applications interconnect√©es.",
        "D√©veloppement orient√© utilisateur, int√©gration d'API, optimisation d'applications."
    )

    style_project(
        "Projet Mastercamp Data Science",
        "Python, FastText, Pandas, Scikit-learn",
        "Traitement et classification de brevets en utilisant le mod√®le FastText pour une classification automatique pr√©cise.",
        "Manipulation de grandes bases de donn√©es, apprentissage automatique supervis√© et non supervis√©, utilisation d'algorithmes NLP avanc√©s.",
        "Traitement de texte, classification de donn√©es, gestion de projets de data science en √©quipe."
    )

# Page CV
elif choice == "CV":
    style_title("Curriculum Vitae")
    st.image(profile_image, width=150, use_column_width='auto')
    style_subtitle("Alon Debasc - Ing√©nieur Data & Intelligence Artificielle")

    col1, col2 = st.columns(2)
    with col1:
        st.write("### üìû Contact")
        st.markdown(f"<p><strong>T√©l√©phone :</strong> +33 (0)6 79 04 39 61</p>", unsafe_allow_html=True)
        st.markdown(f"<p><strong>Email :</strong> <a href='mailto:alon.debasc@efrei.net' style='color:{primary_color};'>alon.debasc@efrei.net</a></p>", unsafe_allow_html=True)
        st.markdown(f"<p><strong>LinkedIn :</strong> <a href='https://www.linkedin.com/in/alon-debasc-17737b223/?originalSubdomain=fr' style='color:{primary_color};'>linkedin.com/in/alon-debasc</a></p>", unsafe_allow_html=True)
    
    with col2:
        style_subtitle("Formation")
        st.write("EFREI Paris - Panth√©on Assas (2021 - 2026)")
        st.write("Cycle ing√©nieur Data Engineering, 4√®me ann√©e Majeure Big Data et Intelligence Artificielle.")
        st.write("Concordia University (Septembre - D√©cembre 2023 üá®üá¶)")
        st.write("Semestre d‚Äô√©change √† Montr√©al.")
    
    st.markdown("---")

    style_subtitle("Exp√©riences Professionnelles")
    st.write("- Business Manager - INTM Belgium (Stage Juillet - Ao√ªt 2024)\n  Prospection commerciale et recrutement √† Bruxelles, avec communication en anglais.")
    st.write("- Business Developer - LOGTEAM (CDD Janvier - Juin 2023)\n  D√©veloppement de portefeuille client, prospection √† froid, recherche et prise de rendez-vous.")
    st.write("- Consultant Recrutement - LOGTEAM (CDD Juin - Juillet 2023)\n  Recrutement, scraping, gestion des candidats et coordination d'√©v√©nements.")
    st.markdown("---")

    style_subtitle("Comp√©tences")
    skills = {
        "Langages de programmation": 7,
        "D√©veloppement web": 7,
        "Bases de donn√©es": 7,
        "Gestion de projet": 9,
        "Gestion d'√©quipe": 9,
        "Prospection commerciale": 8,
        "Communication": 9
    }
    labels = list(skills.keys())
    values = list(skills.values())

    # Cr√©er un graphique radar pour les comp√©tences
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values + [values[0]],
        theta=labels + [labels[0]],
        fill='toself',
        name='Comp√©tences',
        line_color=primary_color
    ))
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10],
                showticklabels=True,
                tickfont=dict(color='#333333')  # Changer la couleur des √©tiquettes pour les rendre visibles
            )
        ),
        showlegend=False
    )
    st.plotly_chart(fig)

    # Ajouter les langues parl√©es
    style_subtitle("Langues Parl√©es")
    st.write("- Fran√ßais üá´üá∑ : Langue maternelle")
    st.write("- Anglais üá¨üáß : Courant")
    st.write("- Espagnol üá™üá∏ : Notions")

    # Graphique des comp√©tences linguistiques
    style_subtitle("Niveau de Comp√©tence Linguistique")
    languages = ["Fran√ßais", "Anglais", "Espagnol"]
    levels = [10, 8, 5]

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.barh(languages, levels, color=secondary_color)
    ax.set_xlabel("Niveau de Comp√©tence (sur 10)")
    ax.set_title("Comp√©tences Linguistiques")
    st.pyplot(fig)
    st.markdown("---")

    # Ajouter les hobbies
    style_subtitle("Hobbies")
    st.write("- ‚öΩ Football (Foot salle)")
    st.write("- üé≠ Cin√©ma : Science-fiction, Com√©die")
    st.write("- üëü Mode : Sneakers, Streetwear")
    st.write("- ‚úà Voyages : Canada, √âtats-Unis, Cara√Øbes")
    st.write("- ü•ã Krav Maga : Ceinture verte")
    st.markdown("---")

# Page Analyse Dataset
if choice == "Analyse Dataset":
    style_title("Analyse du Dataset : Index √âgalit√© Professionnelle F/H")

    # Contexte du dataset et choix de l'analyse
    with st.container():
        style_subtitle("Contexte et Choix du Dataset")
        col1, col2 = st.columns(2)
        with col1:
            st.write("L'index √âgalit√© Professionnelle entre les femmes et les hommes est une initiative visant √† mesurer l'engagement des entreprises pour r√©duire les in√©galit√©s professionnelles. Ce dataset regroupe des donn√©es provenant d'entreprises de plus de 50 salari√©s en France. J'ai choisi ce dataset car il permet de mettre en lumi√®re des enjeux soci√©taux cruciaux, notamment l'√©galit√© des genres, et d'identifier les entreprises qui se distinguent dans ce domaine.")
            st.write("L'objectif est de fournir une vision claire des tendances actuelles et des progr√®s r√©alis√©s en mati√®re d'√©galit√© salariale et professionnelle, ainsi que de voir comment les entreprises peuvent am√©liorer leurs politiques.")
        with col2:
            st.metric(label="Nombre total de lignes", value="151,763")
            st.metric(label="Nombre de variables", value="17")

    st.markdown("---")

    # Charger le fichier Excel fourni
    try:
        df = pd.read_excel("index-egalite-fh.xlsx")
    except FileNotFoundError:
        st.error("Le fichier 'index-egalite-fh.xlsx' est introuvable. Assurez-vous qu'il est bien plac√© dans le r√©pertoire du script.")
        st.stop()
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier : {e}")
        st.stop()

    # Aper√ßu du Dataset
    st.write("### Aper√ßu du Dataset")
    st.dataframe(df.head())

    # Description du Dataset
    style_subtitle("Variables Cl√©s du Dataset")
    st.write("""
        - *Ann√©e* : L'ann√©e √† laquelle l'index a √©t√© mesur√©.
        - *Structure* : Type de structure (Entreprise, Groupe, etc.).
        - *Tranche d'effectifs* : Cat√©gorisation par taille de l'entreprise (50-250, 251-999, 1000 et plus).
        - *R√©gion et D√©partement* : Localisation g√©ographique des entreprises.
        - *Code NAF* : Activit√© √©conomique de l'entreprise.
        - *Note Ecart r√©mun√©ration, Note Index* : Diff√©rents indicateurs d'√©galit√© professionnelle.
    """)

    st.markdown("---")

    # Conversion des colonnes n√©cessaires en num√©riques pour √©viter les erreurs
    try:
        df['Note Index'] = pd.to_numeric(df['Note Index'], errors='coerce')
        df['Note Ecart r√©mun√©ration'] = pd.to_numeric(df['Note Ecart r√©mun√©ration'], errors='coerce')
    except KeyError as e:
        st.error(f"La colonne suivante est manquante dans le dataset : {e}")
        st.stop()

    # --- Ajout des filtres interactifs ---
    st.sidebar.header("Options de Filtrage")
    
    # Filtres pour les diff√©rentes colonnes
    selected_regions = st.sidebar.multiselect("S√©lectionner une R√©gion :", options=df['R√©gion'].unique(), default=df['R√©gion'].unique())
    selected_tranches_effectifs = st.sidebar.multiselect("S√©lectionner une Tranche d'Effectifs :", options=df['Tranche d\'effectifs'].unique(), default=df['Tranche d\'effectifs'].unique())
    selected_years = st.sidebar.slider("S√©lectionner l'Ann√©e :", int(df['Ann√©e'].min()), int(df['Ann√©e'].max()), (int(df['Ann√©e'].min()), int(df['Ann√©e'].max())))

    # Filtrer le dataframe selon les choix
    filtered_df = df[
        (df['R√©gion'].isin(selected_regions)) & 
        (df['Tranche d\'effectifs'].isin(selected_tranches_effectifs)) & 
        (df['Ann√©e'] >= selected_years[0]) & 
        (df['Ann√©e'] <= selected_years[1])
    ]

      # --- Ajout de la Carte de Position avec Taux d'√âgalit√© par R√©gion ---
    style_subtitle("R√©partition G√©ographique du Taux d'√âgalit√© Professionnelle par R√©gion")
    geolocator = Nominatim(user_agent="geoapiExercises")

    # Initialiser la carte
    m = folium.Map(location=[46.603354, 1.888334], zoom_start=5)

    # Ajouter des points sur la carte pour les r√©gions s√©lectionn√©es avec taux d'√©galit√©
    if 'R√©gion' in filtered_df.columns and 'Note Index' in filtered_df.columns:
        region_data = filtered_df.groupby('R√©gion')['Note Index'].mean().dropna()
        for region, note_index in region_data.items():
            try:
                location = geolocator.geocode(region + ", France")
                if location:
                    folium.CircleMarker(
                        location=[location.latitude, location.longitude],
                        radius=note_index / 10,  # Taille du cercle proportionnelle au taux d'√©galit√©
                        popup=f"R√©gion: {region}<br>Note Index: {note_index:.2f}",
                        color='blue',
                        fill=True,
                        fill_color='blue'
                    ).add_to(m)
            except:
                pass

    folium_static(m)

    st.markdown("---")


    # --- Visualisations avec Plotly pour un rendu plus esth√©tique et interactif ---

    # R√©partition des Notes de l'Index par R√©gion
    style_subtitle("R√©partition des Notes de l'Index par R√©gion")
    st.write("Cette visualisation permet de voir si certaines r√©gions se d√©marquent par rapport √† l'√©galit√© professionnelle. Cela pourrait indiquer un effet des politiques r√©gionales ou des initiatives sp√©cifiques.")
    if 'R√©gion' in filtered_df.columns and 'Note Index' in filtered_df.columns:
        fig = px.bar(
            filtered_df.groupby('R√©gion')['Note Index'].mean().reset_index(),
            x='Note Index',
            y='R√©gion',
            orientation='h',
            title="Moyenne des Notes de l'Index par R√©gion",
            labels={"Note Index": "Note Moyenne de l'Index", "R√©gion": "R√©gion"},
            template="plotly_white",
            color_discrete_sequence=[secondary_color]
        )
        fig.update_layout(title_font_size=20, title_font_family="Arial", title_x=0.5)
        st.plotly_chart(fig)

    # Comparaison des Notes de l'Index par Tranche d'effectifs
    style_subtitle("Comparaison des Notes de l'Index par Tranche d'effectifs")
    st.write("Cette visualisation montre l'impact de la taille de l'entreprise sur les performances en mati√®re d'√©galit√© professionnelle.")
    if 'Tranche d\'effectifs' in filtered_df.columns and 'Note Index' in filtered_df.columns:
        fig = px.box(
            filtered_df,
            x='Tranche d\'effectifs',
            y='Note Index',
            title="R√©partition des Notes de l'Index par Tranche d'effectifs",
            labels={"Tranche d\'effectifs": "Tranche d'effectifs", "Note Index": "Note de l'Index"},
            template="plotly_white",
            color_discrete_sequence=[secondary_color]
        )
        fig.update_layout(title_font_size=20, title_font_family="Arial", title_x=0.5)
        st.plotly_chart(fig)

    # Corr√©lation entre les Notes d'√âcart de r√©mun√©ration et l'Index global
    style_subtitle("Corr√©lation entre l'√âcart de r√©mun√©ration et la Note de l'Index")
    st.write("Cette corr√©lation met en √©vidence l'importance de la r√©mun√©ration √©quitable.")
    if 'Note Ecart r√©mun√©ration' in filtered_df.columns and 'Note Index' in filtered_df.columns:
        fig = px.scatter(
            filtered_df,
            x='Note Ecart r√©mun√©ration',
            y='Note Index',
            title="Corr√©lation entre la Note d'√âcart de R√©mun√©ration et la Note de l'Index",
            labels={"Note Ecart r√©mun√©ration": "Note √âcart de R√©mun√©ration", "Note Index": "Note de l'Index"},
            template="plotly_white",
            color_discrete_sequence=[secondary_color]
        )
        fig.update_layout(title_font_size=20, title_font_family="Arial", title_x=0.5)
        st.plotly_chart(fig)

    # √âvolution des Notes de l'Index dans le Temps (par Ann√©e)
    style_subtitle("√âvolution des Notes de l'Index dans le Temps")
    st.write("Cette analyse montre l'√©volution des scores d'√©galit√© professionnelle au fil des ann√©es. Une tendance √† la hausse montre que les efforts des entreprises et les politiques publiques ont port√© leurs fruits.")
    if 'Ann√©e' in df.columns and 'Note Index' in df.columns:
        fig = px.line(
            df.groupby('Ann√©e')['Note Index'].mean().reset_index(),
            x='Ann√©e',
            y='Note Index',
            title="√âvolution des Notes de l'Index au Fil des Ann√©es",
            labels={"Ann√©e": "Ann√©e", "Note Index": "Note Moyenne de l'Index"},
            template="plotly_white",
            color_discrete_sequence=[secondary_color]
        )
        fig.update_layout(title_font_size=20, title_font_family="Arial", title_x=0.5)
        st.plotly_chart(fig)

    # Conclusion
    style_subtitle("Conclusion")
    st.write("Cette analyse met en √©vidence les disparit√©s de l'√©galit√© professionnelle dans les diff√©rentes r√©gions de France et les diff√©rences entre les tranches d'effectifs. Les entreprises qui r√©duisent les √©carts de r√©mun√©ration obtiennent de meilleures notes, soulignant l'importance d'une politique salariale √©quitable. Les efforts collectifs et les politiques publiques ont port√© leurs fruits, mais des am√©liorations sont encore possibles, en particulier pour les entreprises de taille moyenne qui rencontrent des difficult√©s. L'avenir de l'√©galit√© professionnelle semble prometteur, mais n√©cessite des engagements continus.")
